{"version":3,"sources":["components/AddResource.js","components/Term.js","components/AddTerm.js","components/UpdateTerm.js","components/Catalog.js","App.js","serviceWorker.js","index.js"],"names":["AddResource","refresh","term","id","useState","resources","setRes","link","setLink","displayName","setDisName","onSubmit","event","preventDefault","tempArr","push","fetch","process","method","headers","body","JSON","stringify","then","value","type","onChange","target","placeholder","Term","deleteButton","archiveButton","updateButton","deleteTerm","updateTerm","archiveTerm","restoreTerm","displayActive","displayArchived","displayResources","map","resource","index","key","href","onClick","splice","_id","removeRes","archived","displayedTerm","name","definition","renderTerm","AddTerm","setName","setDef","required","UpdateTerm","Catalog","catalog","setCatalog","isCreate","setIsCreate","termToUpdate","setUpdateTerm","setArchived","setActive","useEffect","getCatalog","archiveHideButton","activeHideButton","response","json","toggleArchive","displayCatalog","className","formToRender","data","renderForm","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.212a76ca.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst AddResource = ({refresh, term, id}) => {\r\n    const [resources, setRes] = useState(term.resources)\r\n    const [link, setLink] = useState('');\r\n    const [displayName, setDisName] = useState('');\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const tempArr = resources;\r\n        tempArr.push({link, displayName});\r\n        setRes(tempArr);\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify({resources})\r\n        }).then(refresh)\r\n            .then(() => setLink(''))\r\n            .then(() => setDisName(''))\r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input value={link} \r\n                type='text'\r\n                onChange={({target}) => setLink(target.value)}\r\n                placeholder='Source Link'/>\r\n            <input value={displayName} \r\n                type='text'\r\n                onChange={({target}) => setDisName(target.value)}\r\n                placeholder='Source Name'/>\r\n            <input type='submit'\r\n                value='Add Resource'/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddResource","import React, {useState} from 'react';\r\nimport AddResource from './AddResource';\r\n\r\nconst Term = ({term, deleteTerm, updateTerm, archiveTerm, restoreTerm, refresh, displayActive, displayArchived}) => {\r\n    const removeRes = (index) => {\r\n        const tempArr = term.resources;\r\n        tempArr.splice(index, 1);\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog/${term._id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify({resources:tempArr})\r\n        }).then(refresh)\r\n    }\r\n    const displayResources = term.resources.map((resource, index) => {\r\n        return(\r\n            <li key={index}><a href={resource.link}>{resource.displayName}</a>\r\n                <button onClick={() => removeRes(index)}>Remove Resource</button>\r\n            </li>\r\n        )\r\n    });\r\n    let deleteButton;\r\n    let archiveButton;\r\n    let updateButton;\r\n    if(term.archived) {\r\n        deleteButton = <button onClick={() => deleteTerm(term._id)}>Delete Term</button>\r\n        archiveButton = <button onClick={() => restoreTerm(term._id)}>Restore Term</button>\r\n    } else{\r\n        archiveButton = <button onClick={() => archiveTerm(term._id)}>Archive Term</button>\r\n        updateButton = <button onClick={() => updateTerm(term)}>Update</button>\r\n    }\r\n    let renderTerm = () => {\r\n        let displayedTerm;\r\n        if((term.archived && displayArchived) || ((!term.archived) && displayActive)){\r\n            displayedTerm = <>\r\n            <h3>{term.name}</h3>\r\n            <p>Definition: {term.definition}</p>\r\n            {archiveButton}\r\n            {deleteButton}\r\n            {updateButton}\r\n            <h4>Resources for {term.name}</h4>\r\n            <AddResource term ={term}\r\n            id={term._id} \r\n            refresh={refresh}/>\r\n            <ul>{displayResources}</ul>\r\n        </>\r\n        }\r\n        return displayedTerm;\r\n    }\r\n    return (\r\n        <div>\r\n            {renderTerm()}\r\n        </div>\r\n    )\r\n}\r\nexport default Term;","import React, {useState} from 'react';\r\n\r\nconst AddTerm = ({refresh}) => {\r\n    const [name, setName] = useState('');\r\n    const [definition, setDef] = useState('');\r\n    const [resources, setRes] = useState([]);\r\n    const [link, setLink] = useState('');\r\n    const [displayName, setDisName] = useState(''); \r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const tempArr = resources;\r\n        tempArr.push({link, displayName});\r\n        setRes(tempArr);\r\n        const archived = false;\r\n        const term = {name, definition, resources, archived};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(term)\r\n        }).then(refresh)\r\n            .then(() => setName(''))\r\n            .then(() => setDef(''))\r\n            .then(() => setRes([]))\r\n            .then(() => setLink(''))\r\n            .then(() => setDisName(''));\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={name}\r\n                type='text'\r\n                onChange={({target}) => setName(target.value)}\r\n                placeholder='Name of Term'\r\n                required/>\r\n            <textarea value={definition}\r\n                type='text'\r\n                onChange={({target}) => setDef(target.value)}\r\n                placeholder='Definition'\r\n                required/>\r\n            <input value={link} \r\n                type='text'\r\n                onChange={({target}) => setLink(target.value)}\r\n                placeholder='Source Link'\r\n                required/>\r\n            <input value={displayName} \r\n                type='text'\r\n                onChange={({target}) => setDisName(target.value)}\r\n                placeholder='Source Name'\r\n                required/>\r\n            <input type='submit'\r\n                value='Add to Catalog'/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTerm;","import React, {useState} from 'react';\r\n\r\nconst UpdateTerm = ({refresh, term, id}) => {\r\n    const [name, setName] = useState(term.name);\r\n    const [definition, setDef] = useState(term.definition);\r\n    const [resources, setRes] = useState(term.resources);\r\n    const [link, setLink] = useState(term.resources[0].link);\r\n    const [displayName, setDisName] = useState(term.resources[0].displayName); \r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const tempArr = resources;\r\n        tempArr[0] = {link, displayName};\r\n        setRes(tempArr);\r\n        const term = {name, definition, resources};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog/${id}`, {\r\n            method: 'PUT',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(term)\r\n        }).then(refresh)\r\n            .then(() => setName(''))\r\n            .then(() => setDef(''))\r\n            .then(() => setRes([]))\r\n            .then(() => setLink(''))\r\n            .then(() => setDisName(''));\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={name}\r\n                type='text'\r\n                onChange={({target}) => setName(target.value)}\r\n                placeholder='Name of Term'\r\n                required/>\r\n            <textarea value={definition}\r\n                type='text'\r\n                onChange={({target}) => setDef(target.value)}\r\n                placeholder='Definition'\r\n                required/>\r\n            <input value={link} \r\n                type='text'\r\n                onChange={({target}) => setLink(target.value)}\r\n                placeholder='First Source Link'/>\r\n            <input value={displayName} \r\n                type='text'\r\n                onChange={({target}) => setDisName(target.value)}\r\n                placeholder='First Source Name'/>\r\n            <input type='submit'\r\n                value='Edit Term'/>\r\n            <input type='button'\r\n                value='Cancel Edit'\r\n                onClick={refresh}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UpdateTerm;","import React, {useState, useEffect} from 'react';\r\nimport Term from './Term';\r\nimport AddTerm from './AddTerm'\r\nimport UpdateTerm from './UpdateTerm'\r\n\r\nconst Catalog = () => {\r\n    const [catalog, setCatalog] = useState([]);\r\n    const [isCreate, setIsCreate] = useState(true);\r\n    const [termToUpdate, setUpdateTerm] = useState({});\r\n    const [displayArchived, setArchived] = useState(false);\r\n    const [displayActive, setActive] = useState(true);\r\n\r\n    useEffect(() => {\r\n        getCatalog();\r\n    }, []);\r\n\r\n    const getCatalog = () =>{\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog`)\r\n            .then(response => response.json())\r\n            .then(catalog => setCatalog(catalog))\r\n            .then(() => setIsCreate(true));\r\n    }\r\n    const deleteTerm = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json())\r\n            .then(getCatalog);\r\n    }\r\n    const updateTerm = (term) => {\r\n        setIsCreate(false);\r\n        setUpdateTerm(term);\r\n    }\r\n    const toggleArchive = (term, id) =>{\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(term)\r\n        }).then(getCatalog);\r\n    }\r\n    const archiveTerm = (id) => {\r\n        const archivedTerm = {archived: true};\r\n        toggleArchive(archivedTerm, id);\r\n    }\r\n\r\n    const restoreTerm = (id) => {\r\n        const restoredTerm = {archived: false};\r\n        toggleArchive(restoredTerm, id);\r\n    }\r\n\r\n    const renderForm = () => {\r\n        let formToRender;\r\n        if(isCreate){\r\n            formToRender = <AddTerm key=\"createForm\"refresh={getCatalog}/>\r\n        }else{\r\n            const data = termToUpdate;\r\n            formToRender = <UpdateTerm key={data._id} \r\n                id={data._id} \r\n                term={data} \r\n                refresh={getCatalog}/>\r\n        }\r\n        return formToRender;\r\n    }\r\n    const displayCatalog = catalog.map((term) => {\r\n        return <Term key = {term._id}\r\n                term={term}\r\n                deleteTerm={deleteTerm} \r\n                updateTerm={updateTerm} \r\n                archiveTerm={archiveTerm}\r\n                restoreTerm={restoreTerm} \r\n                refresh={getCatalog} \r\n                displayActive={displayActive} \r\n                displayArchived={displayArchived}/>\r\n    });\r\n\r\n    let archiveHideButton;\r\n    if(displayArchived){\r\n        archiveHideButton = <button onClick={() => setArchived(!displayArchived)}>Hide Archived Terms</button>\r\n    }else{\r\n        archiveHideButton = <button onClick={() => setArchived(!displayArchived)}>Display Archived Terms</button>\r\n    }\r\n    let activeHideButton;\r\n    if(displayActive){\r\n        activeHideButton = <button onClick={() => setActive(!displayActive)}>Hide Active Terms</button>\r\n    }else{\r\n        activeHideButton = <button onClick={() => setActive(!displayActive)}>Show Active Terms</button>\r\n    }\r\n    return(\r\n        <div className='catalog'>\r\n            <h1>Web Development Terminology</h1>\r\n            {renderForm()}\r\n            {archiveHideButton}\r\n            {activeHideButton}\r\n            <div className='wrapper'>{displayCatalog}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Catalog;","import React from 'react';\nimport './App.css';\nimport Catalog from './components/Catalog'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Catalog/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className ='All'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}